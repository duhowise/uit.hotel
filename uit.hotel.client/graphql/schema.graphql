schema {
    query: AppQuery
    mutation: AppMutation
}

type AppMutation {
    addBookingToBill(bill: BillId!, booking: BookingCreateInput!): Booking!
    bookAndCheckIn(
        bookings: [BookAndCheckInCreateInput!]!
        bill: BillCreateInput!
    ): Bill!
    cancel(id: ID!): String!
    createBill(bookings: [BookingCreateInput!]!, bill: BillCreateInput!): Bill!
    createEmployee(input: EmployeeCreateInput!): Employee!
    createFloor(input: FloorCreateInput!): Floor!
    createPatron(input: PatronCreateInput!): Patron!
    createPatronKind(input: PatronKindCreateInput!): PatronKind!
    createPosition(input: PositionCreateInput!): Position!
    createPrice(input: PriceCreateInput!): Price!
    createPriceVolatility(input: PriceVolatilityCreateInput!): PriceVolatility!
    createReceipt(input: ReceiptCreateInput!): Receipt!
    createRoom(input: RoomCreateInput!): Room!
    createRoomKind(input: RoomKindCreateInput!): RoomKind!
    createService(input: ServiceCreateInput!): Service!
    createServicesDetail(input: ServicesDetailCreateInput!): ServicesDetail!
    changePassword(password: String!, newPassword: String!): String!
    checkBookingPrice(booking: BookingCreateInput!): Booking!
    checkIn(id: ID!): Booking!
    checkLogin: Employee!
    checkOut(id: ID!): Booking!
    checkReceipt(id: ID!): Receipt!
    deleteFloor(id: ID!): String!
    deletePatronKind(id: ID!): String!
    deletePosition(id: ID!): String!
    deletePrice(id: ID!): String!
    deletePriceVolatility(id: ID!): String!
    deleteRoom(id: ID!): String!
    deleteRoomKind(id: ID!): String!
    deleteService(id: ID!): String!
    deleteServicesDetail(id: ID!): String!
    initializeAdminAccount(email: String!, password: String!): String!
    initializeDatabase: String!
    login(id: String!, password: String!): AuthenticationObject!
    payTheBill(id: ID!): Bill!
    resetPassword(id: ID!): String!
    setIsActiveAccount(id: ID!, isActive: Boolean!): String!
    setIsActiveFloor(id: ID!, isActive: Boolean!): String!
    setIsActivePosition(id: ID!, isActive: Boolean!): String!
    setIsActivePositionAndMoveEmployee(
        id: ID!
        newId: ID!
        isActive: Boolean!
    ): String!
    setIsActiveRoom(id: ID!, isActive: Boolean!): String!
    setIsActiveRoomKind(id: ID!, isActive: Boolean!): String!
    setIsActiveService(id: ID!, isActive: Boolean!): String!
    setIsCleanRoom(id: ID!, isClean: Boolean!): String!
    updateBill(input: BillUpdateInput!): Bill!
    updateBillDiscount(input: BillUpdateDiscountInput!): Bill!
    updateEmployee(input: EmployeeUpdateInput!): Employee!
    updateFloor(input: FloorUpdateInput!): Floor!
    updatePatron(input: PatronUpdateInput!): Patron!
    updatePatronKind(input: PatronKindUpdateInput!): PatronKind!
    updatePosition(input: PositionUpdateInput!): Position!
    updatePrice(input: PriceUpdateInput!): Price!
    updatePriceVolatility(input: PriceVolatilityUpdateInput!): PriceVolatility!
    updateRoom(input: RoomUpdateInput!): Room!
    updateRoomKind(input: RoomKindUpdateInput!): RoomKind!
    updateService(input: ServiceUpdateInput!): Service!
    updateServicesDetail(input: ServicesDetailUpdateInput!): ServicesDetail!
}

type AppQuery {
    bill(id: ID!): Bill!
    bills: [Bill!]!
    booking(id: ID!): Booking!
    bookings: [Booking!]!
    employee(id: ID!): Employee!
    employees: [Employee!]!
    findingPatron(id: ID!): [Patron!]!
    floor(id: ID!): Floor!
    floors: [Floor!]!
    isInitialized: Boolean!
    patron(id: ID!): Patron!
    patronKind(id: ID!): PatronKind!
    patronKinds: [PatronKind!]!
    patrons: [Patron!]!
    position(id: ID!): Position!
    positions: [Position!]!
    price(id: ID!): Price!
    prices: [Price!]!
    priceVolatilities: [PriceVolatility!]!
    priceVolatility(id: ID!): PriceVolatility!
    receipt(id: ID!): Receipt!
    receipts: [Receipt!]!
    room(id: ID!): Room!
    roomKind(id: ID!): RoomKind!
    roomKinds: [RoomKind!]!
    rooms: [Room!]!
    service(id: ID!): Service!
    services: [Service!]!
    servicesDetail(id: ID!): ServicesDetail!
    servicesDetails: [ServicesDetail!]!
}

type AuthenticationObject {
    employee: Employee!
    token: String!
}

type Bill {
    bookings: [Booking!]!
    discount: Int!
    employee: Employee
    id: Int!
    patron: Patron!
    receipts: [Receipt!]!
    status: BillStatusEnum!
    time: DateTimeOffset!
    totalPrice: Int!
    totalReceipts: Int!
}

input BillCreateInput {
    patron: PatronId!
}

input BillId {
    id: Int!
}

enum BillStatusEnum {
    PENDING
    SUCCESS
    CANCEL
}

input BillUpdateDiscountInput {
    id: Int!
    discount: Int!
}

input BillUpdateInput {
    id: Int!
    discount: Int!
    patron: PatronId!
}

input BookAndCheckInCreateInput {
    bookCheckOutTime: DateTimeOffset!
    room: RoomId!
    listOfPatrons: [PatronId!]!
}

type Booking {
    baseDayCheckInTime: DateTimeOffset!
    baseDayCheckOutTime: DateTimeOffset!
    baseNightCheckInTime: DateTimeOffset!
    bill: Bill!
    bookCheckInTime: DateTimeOffset!
    bookCheckOutTime: DateTimeOffset!
    createTime: DateTimeOffset!
    earlyCheckInFee: Int!
    employeeBooking: Employee
    employeeCheckIn: Employee
    employeeCheckOut: Employee
    id: Int!
    lateCheckOutFee: Int!
    patrons: [Patron!]!
    price: Price!
    priceItems: [PriceItem!]!
    priceVolatilityItems: [PriceVolatilityItem!]!
    realCheckInTime: DateTimeOffset!
    realCheckOutTime: DateTimeOffset!
    room: Room!
    servicesDetails: [ServicesDetail!]!
    status: BookingStatusEnum!
    total: Int!
    totalPrice: Int!
    totalServicesDetails: Int!
}

input BookingCreateInput {
    bookCheckInTime: DateTimeOffset!
    bookCheckOutTime: DateTimeOffset!
    room: RoomId!
    listOfPatrons: [PatronId!]!
}

input BookingId {
    id: Int!
}

enum BookingStatusEnum {
    BOOKED
    CHECKED_IN
    CHECKED_OUT
}

# The `Date` scalar type represents a year, month and day in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar Date

# The `DateTime` scalar type represents a date and time. `DateTime` expects
# timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

# The `DateTimeOffset` scalar type represents a date, time and offset from UTC.
# `DateTimeOffset` expects timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTimeOffset

scalar Decimal

type Employee {
    address: String!
    bills: [Bill!]!
    birthdate: DateTimeOffset!
    bookings: [Booking!]!
    email: String!
    gender: Boolean!
    id: String!
    identityCard: String!
    isActive: Boolean!
    name: String!
    position: Position!
    prices: [Price!]!
    priceVolatilities: [PriceVolatility!]!
    phoneNumber: String!
    receipts: [Receipt!]!
    startingDate: DateTimeOffset!
}

input EmployeeCreateInput {
    id: String!
    password: String!
    name: String!
    identityCard: String!
    phoneNumber: String!
    address: String!
    email: String!
    birthdate: DateTimeOffset!
    gender: Boolean!
    startingDate: DateTimeOffset!
    position: PositionId!
}

input EmployeeUpdateInput {
    id: String!
    name: String!
    identityCard: String!
    address: String!
    birthdate: DateTimeOffset!
    email: String!
    gender: Boolean!
    phoneNumber: String!
    startingDate: DateTimeOffset!
    position: PositionId!
}

type Floor {
    id: Int!
    isActive: Boolean!
    name: String!
    rooms: [Room!]!
}

input FloorCreateInput {
    name: String!
}

input FloorId {
    id: Int!
}

input FloorUpdateInput {
    id: Int!
    name: String!
}

# The `Milliseconds` scalar type represents a period of time represented as the total number of milliseconds.
scalar Milliseconds

type Patron {
    bills: [Bill!]!
    birthdate: DateTimeOffset!
    bookings: [Booking!]!
    company: String!
    domicile: String!
    email: String!
    gender: Boolean!
    id: Int!
    identification: String!
    name: String!
    nationality: String!
    note: String!
    patronKind: PatronKind!
    phoneNumber: String!
    residence: String!
}

input PatronCreateInput {
    identification: String!
    name: String!
    email: String!
    gender: Boolean!
    birthdate: DateTimeOffset = null
    nationality: String!
    domicile: String!
    residence: String!
    phoneNumber: String!
    company: String!
    note: String!
    patronKind: PatronKindId!
}

input PatronId {
    id: Int!
}

type PatronKind {
    description: String!
    id: Int!
    name: String!
    patrons: [Patron!]!
}

input PatronKindCreateInput {
    name: String!
    description: String!
}

input PatronKindId {
    id: Int!
}

input PatronKindUpdateInput {
    id: Int!
    name: String!
    description: String!
}

input PatronUpdateInput {
    id: Int!
    identification: String!
    name: String!
    email: String!
    gender: Boolean!
    birthdate: DateTimeOffset!
    nationality: String!
    domicile: String!
    residence: String!
    phoneNumber: String!
    company: String!
    note: String!
    patronKind: PatronKindId!
}

type Position {
    countActiveEmployees: Int!
    countEmployees: Int!
    countInActiveEmployees: Int!
    employees: [Employee!]!
    id: Int!
    isActive: Boolean!
    name: String!
    permissionCleaning: Boolean!
    permissionGetAccountingVoucher: Boolean!
    permissionGetMap: Boolean!
    permissionGetPatron: Boolean!
    permissionGetPrice: Boolean!
    permissionGetService: Boolean!
    permissionManageEmployee: Boolean!
    permissionManageMap: Boolean!
    permissionManagePatron: Boolean!
    permissionManagePatronKind: Boolean!
    permissionManagePosition: Boolean!
    permissionManagePrice: Boolean!
    permissionManageRentingRoom: Boolean!
    permissionManageService: Boolean!
}

input PositionCreateInput {
    name: String!
    permissionCleaning: Boolean!
    permissionGetAccountingVoucher: Boolean!
    permissionGetMap: Boolean!
    permissionGetPatron: Boolean!
    permissionGetPrice: Boolean!
    permissionGetService: Boolean!
    permissionManageEmployee: Boolean!
    permissionManageRentingRoom: Boolean!
    permissionManagePatron: Boolean!
    permissionManagePatronKind: Boolean!
    permissionManagePosition: Boolean!
    permissionManagePrice: Boolean!
    permissionManageService: Boolean!
    permissionManageMap: Boolean!
}

input PositionId {
    id: Int!
}

input PositionUpdateInput {
    id: Int!
    name: String!
    permissionCleaning: Boolean!
    permissionGetMap: Boolean!
    permissionGetPatron: Boolean!
    permissionGetPrice: Boolean!
    permissionGetService: Boolean!
    permissionGetAccountingVoucher: Boolean!
    permissionManageEmployee: Boolean!
    permissionManageRentingRoom: Boolean!
    permissionManageMap: Boolean!
    permissionManagePatron: Boolean!
    permissionManagePatronKind: Boolean!
    permissionManagePosition: Boolean!
    permissionManagePrice: Boolean!
    permissionManageService: Boolean!
}

type Price {
    createDate: DateTimeOffset!
    dayPrice: Int!
    earlyCheckInFee: Int!
    effectiveStartDate: DateTimeOffset!
    employee: Employee
    hourPrice: Int!
    id: Int!
    lateCheckOutFee: Int!
    monthPrice: Int!
    nightPrice: Int!
    roomKind: RoomKind!
    weekPrice: Int!
}

input PriceCreateInput {
    hourPrice: Int!
    dayPrice: Int!
    nightPrice: Int!
    weekPrice: Int!
    monthPrice: Int!
    lateCheckOutFee: Int!
    earlyCheckInFee: Int!
    effectiveStartDate: DateTimeOffset!
    roomKind: RoomKindId!
}

type PriceItem {
    booking: Booking!
    kind: PriceItemKindEnum!
    timeSpan: Seconds!
    value: Int!
}

enum PriceItemKindEnum {
    HOUR
    NIGHT
    DAY
    WEEK
    MONTH
}

input PriceUpdateInput {
    id: Int!
    hourPrice: Int!
    dayPrice: Int!
    nightPrice: Int!
    weekPrice: Int!
    monthPrice: Int!
    lateCheckOutFee: Int!
    earlyCheckInFee: Int!
    effectiveStartDate: DateTimeOffset!
    roomKind: RoomKindId!
}

type PriceVolatility {
    createDate: DateTimeOffset!
    dayPrice: Int!
    effectiveEndDate: DateTimeOffset!
    effectiveOnFriday: Boolean!
    effectiveOnMonday: Boolean!
    effectiveOnSaturday: Boolean!
    effectiveOnSunday: Boolean!
    effectiveOnTuesday: Boolean!
    effectiveOnThursday: Boolean!
    effectiveOnWednesday: Boolean!
    effectiveStartDate: DateTimeOffset!
    employee: Employee
    hourPrice: Int!
    id: Int!
    name: String!
    nightPrice: Int!
    roomKind: RoomKind!
}

input PriceVolatilityCreateInput {
    name: String!
    hourPrice: Int!
    dayPrice: Int!
    nightPrice: Int!
    effectiveStartDate: DateTimeOffset!
    effectiveEndDate: DateTimeOffset!
    effectiveOnMonday: Boolean!
    effectiveOnTuesday: Boolean!
    effectiveOnWednesday: Boolean!
    effectiveOnThursday: Boolean!
    effectiveOnFriday: Boolean!
    effectiveOnSaturday: Boolean!
    effectiveOnSunday: Boolean!
    roomKind: RoomKindId!
}

type PriceVolatilityItem {
    booking: Booking!
    date: DateTimeOffset!
    kind: PriceVolatilityItemKindEnum!
    priceVolatility: PriceVolatility!
    timeSpan: Seconds!
    value: Int!
}

enum PriceVolatilityItemKindEnum {
    HOUR
    NIGHT
    DAY
}

input PriceVolatilityUpdateInput {
    id: Int!
    hourPrice: Int!
    dayPrice: Int!
    nightPrice: Int!
    effectiveStartDate: DateTimeOffset!
    effectiveEndDate: DateTimeOffset!
    effectiveOnMonday: Boolean!
    effectiveOnTuesday: Boolean!
    effectiveOnWednesday: Boolean!
    effectiveOnThursday: Boolean!
    effectiveOnFriday: Boolean!
    effectiveOnSaturday: Boolean!
    effectiveOnSunday: Boolean!
    roomKind: RoomKindId!
}

type Receipt {
    bill: Bill!
    employee: Employee!
    extraData: String!
    id: Int!
    kind: ReceiptKindEnum!
    money: Int!
    orderId: String!
    orderInfo: String!
    payUrl: String!
    status: ReceiptStatusEnum!
    statusText: String!
    time: DateTimeOffset!
}

input ReceiptCreateInput {
    money: Int!
    bill: BillId!
    kind: ReceiptKindEnum!
}

enum ReceiptKindEnum {
    CASH
    MOMO
}

enum ReceiptStatusEnum {
    PENDING
    SUCCESS
    ERROR
    SYSTEM_ERROR
}

type Room {
    bookings: [Booking!]!
    currentBooking(from: DateTimeOffset!, to: DateTimeOffset!): Booking
    floor: Floor!
    id: Int!
    isActive: Boolean!
    isClean: Boolean!
    isEmpty(from: DateTimeOffset!, to: DateTimeOffset!): Boolean!
    name: String!
    roomKind: RoomKind!
}

input RoomCreateInput {
    name: String!
    floor: FloorId!
    roomKind: RoomKindId!
}

input RoomId {
    id: Int!
}

type RoomKind {
    amountOfPeople: Int!
    currentPrice: Price!
    currentPriceVolatilities: [PriceVolatility!]!
    id: Int!
    isActive: Boolean!
    name: String!
    numberOfBeds: Int!
    prices: [Price!]!
    priceVolatilities: [PriceVolatility!]!
    rooms: [Room!]!
}

input RoomKindCreateInput {
    name: String!
    numberOfBeds: Int!
    amountOfPeople: Int!
}

input RoomKindId {
    id: Int!
}

input RoomKindUpdateInput {
    id: Int!
    name: String!
    numberOfBeds: Int!
    amountOfPeople: Int!
}

input RoomUpdateInput {
    id: Int!
    name: String!
    floor: FloorId!
    roomKind: RoomKindId!
}

# The `Seconds` scalar type represents a period of time represented as the total number of seconds.
scalar Seconds

type Service {
    id: Int!
    isActive: Boolean!
    name: String!
    servicesDetails: [ServicesDetail!]!
    unit: String!
    unitPrice: Int!
}

input ServiceCreateInput {
    name: String!
    unitPrice: Int!
    unit: String!
}

input ServiceId {
    id: Int!
}

type ServicesDetail {
    booking: Booking!
    id: Int!
    number: Int!
    service: Service!
    time: DateTimeOffset!
    total: Int!
}

input ServicesDetailCreateInput {
    number: Int!
    service: ServiceId!
    booking: BookingId!
}

input ServicesDetailUpdateInput {
    id: Int!
    number: Int!
    service: ServiceId!
}

input ServiceUpdateInput {
    id: Int!
    name: String!
    unitPrice: Int!
    unit: String!
}
